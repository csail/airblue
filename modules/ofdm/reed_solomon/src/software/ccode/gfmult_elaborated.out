
   result [0] = result [0] ^ (left [0] & right [0]);
   result [1] = result [1] ^ (left [1] & right [0]) ^ (left [0] & right [1]);
   result [2] = result [2] ^ (left [2] & right [0]) ^ (left [1] & right [1]) ^ (left [0] & right [2]);
   result [3] = result [3] ^ (left [3] & right [0]) ^ (left [2] & right [1]) ^ (left [1] & right [2]) ^ (left [0] & right [3]);
   result [4] = result [4] ^ (left [4] & right [0]) ^ (left [3] & right [1]) ^ (left [2] & right [2]) ^ (left [1] & right [3]) ^ (left [0] & right [4]);
   result [5] = result [5] ^ (left [5] & right [0]) ^ (left [4] & right [1]) ^ (left [3] & right [2]) ^ (left [2] & right [3]) ^ (left [1] & right [4]) ^ (left [0] & right [5]);
   result [6] = result [6] ^ (left [6] & right [0]) ^ (left [5] & right [1]) ^ (left [4] & right [2]) ^ (left [3] & right [3]) ^ (left [2] & right [4]) ^ (left [1] & right [5]) ^ (left [0] & right [6]);
   result [7] = result [7] ^ (left [7] & right [0]) ^ (left [6] & right [1]) ^ (left [5] & right [2]) ^ (left [4] & right [3]) ^ (left [3] & right [4]) ^ (left [2] & right [5]) ^ (left [1] & right [6]) ^ (left [0] & right [7]);
   result [8] = result [8] ^ (left [7] & right [1]) ^ (left [6] & right [2]) ^ (left [5] & right [3]) ^ (left [4] & right [4]) ^ (left [3] & right [5]) ^ (left [2] & right [6]) ^ (left [1] & right [7]);
   result [9] = result [9] ^ (left [7] & right [2]) ^ (left [6] & right [3]) ^ (left [5] & right [4]) ^ (left [4] & right [5]) ^ (left [3] & right [6]) ^ (left [2] & right [7]);
   result [10] = result [10] ^ (left [7] & right [3]) ^ (left [6] & right [4]) ^ (left [5] & right [5]) ^ (left [4] & right [6]) ^ (left [3] & right [7]);
   result [11] = result [11] ^ (left [7] & right [4]) ^ (left [6] & right [5]) ^ (left [5] & right [6]) ^ (left [4] & right [7]);
   result [12] = result [12] ^ (left [7] & right [5]) ^ (left [6] & right [6]) ^ (left [5] & right [7]);
   result [13] = result [13] ^ (left [7] & right [6]) ^ (left [6] & right [7]);
   result [14] = result [14] ^ (left [7] & right [7]);

   if (result [14] == 1'b1)
      result = result ^ ((zeroExtend (primitive_polynomial)) << (6));
   if (result [13] == 1'b1)
      result = result ^ ((zeroExtend (primitive_polynomial)) << (5));
   if (result [12] == 1'b1)
      result = result ^ ((zeroExtend (primitive_polynomial)) << (4));
   if (result [11] == 1'b1)
      result = result ^ ((zeroExtend (primitive_polynomial)) << (3));
   if (result [10] == 1'b1)
      result = result ^ ((zeroExtend (primitive_polynomial)) << (2));
   if (result [9] == 1'b1)
      result = result ^ ((zeroExtend (primitive_polynomial)) << (1));
   if (result [8] == 1'b1)
      result = result ^ ((zeroExtend (primitive_polynomial)) << (0));
